# A patch by Tristan Carel that will be included in the next release of CMake
# Downloaded from http://www.itk.org/Bug/view.php?id=4147&nbn=4

#
# Get dependencies of the generated wrapper.
#
MACRO(SWIG_GET_WRAPPER_DEPENDENCIES swigFile genWrapper language DEST_VARIABLE)
  GET_FILENAME_COMPONENT(swig_getdeps_basename ${swigFile} NAME_WE)
  GET_FILENAME_COMPONENT(swig_getdeps_outdir ${genWrapper} PATH)
  GET_SOURCE_FILE_PROPERTY(swig_getdeps_extra_flags "${swigFile}" SWIG_FLAGS)
  IF("${swig_getdeps_extra_flags}" STREQUAL "NOTFOUND")
    SET(swig_getdeps_extra_flags "")
  ENDIF("${swig_getdeps_extra_flags}" STREQUAL "NOTFOUND")

  IF(NOT swig_getdeps_outdir)
    SET(swig_getdeps_outdir ${CMAKE_CURRENT_BINARY_DIR})
  ENDIF(NOT swig_getdeps_outdir)
  SET(swig_getdeps_depsfile
    ${swig_getdeps_outdir}/swig_${swig_getdeps_basename}_deps.txt)
  GET_DIRECTORY_PROPERTY(swig_getdeps_include_directories INCLUDE_DIRECTORIES)
  SET(swig_getdeps_include_dirs)
  FOREACH(it ${swig_getdeps_include_directories})
    SET(swig_getdeps_include_dirs ${swig_getdeps_include_dirs} "-I${it}")
  ENDFOREACH(it)
  EXECUTE_PROCESS(
    COMMAND ${SWIG_EXECUTABLE}
    -MM -MF ${swig_getdeps_depsfile} ${swig_getdeps_extra_flags}
    ${CMAKE_SWIG_FLAGS} -${language}
    -o ${genWrapper} ${swig_getdeps_include_dirs} ${swigFile}
    RESULT_VARIABLE swig_getdeps_result
    ERROR_VARIABLE swig_getdeps_error
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  IF(NOT ${swig_getdeps_error} EQUAL 0)
    MESSAGE(SEND_ERROR "Command \"${SWIG_EXECUTABLE} -MM -MF ${swig_getdeps_depsfile} ${swig_getdeps_extra_flags} ${CMAKE_SWIG_FLAGS} -${language} -o ${genWrapper} ${swig_getdeps_include_dirs} ${swigFile}\" failed with output:\n${swig_getdeps_error}")
    SET(swig_getdeps_dependencies "")
  ELSE(NOT ${swig_getdeps_error} EQUAL 0)
    FILE(READ ${swig_getdeps_depsfile} ${DEST_VARIABLE})
    # Remove the first line
    STRING(REGEX REPLACE "^.+: +\\\\\n +" ""
      ${DEST_VARIABLE} "${${DEST_VARIABLE}}")
    # Clean the end of each line
    STRING(REGEX REPLACE " +(\\\\)?\n" "\n" ${DEST_VARIABLE}
      "${${DEST_VARIABLE}}")
    # Clean beginning of each line
    STRING(REGEX REPLACE "\n +" "\n"
      ${DEST_VARIABLE} "${${DEST_VARIABLE}}")
    # clean paths
    STRING(REGEX REPLACE "\\\\\\\\" "/" ${DEST_VARIABLE}
      "${${DEST_VARIABLE}}")
    STRING(REGEX REPLACE "\n" ";"
      ${DEST_VARIABLE} "${${DEST_VARIABLE}}")
  ENDIF(NOT ${swig_getdeps_error} EQUAL 0)
ENDMACRO(SWIG_GET_WRAPPER_DEPENDENCIES)

if (Pism_BUILD_PYTHON_BINDINGS)
    include(${SWIG_USE_FILE})

    include_directories (. ${PETSC4PY_INCLUDES} ${PYTHON_INCLUDES})
    
    set(PISM_PYTHON_BINDING_LIBRARIES "pism")

    # Get module dependencies:
    SWIG_GET_WRAPPER_DEPENDENCIES("${CMAKE_CURRENT_SOURCE_DIR}/PISM.i" "." python PISM_Python_deps)

    list(APPEND PISM_Python_deps
      AgeModel.i
      EnergyModel.i
      petsc_version.i
      pism_BedDef.i
      pism_ColumnSystem.i
      pism_DM.i
      pism_FlowLaw.i
      pism_Hydrology.i
      pism_IceGrid.i
      pism_IceModelVec.i
      pism_PIO.i
      pism_SIA.i
      pism_SSA.i
      pism_Timeseries.i
      pism_VariableMetadata.i
      pism_Vars.i
      pism_Vec.i
      pism_exception.i
      pism_inverse.i
      pism_ocean.i
      pism_options.i
      pism_verification.i
      )

    if(Pism_USE_TAO)
      set_property(SOURCE PISM.i PROPERTY SWIG_FLAGS "-DPISM_USE_TAO" APPEND)
    endif()

    if(Pism_USE_TR1)
      set_property(SOURCE PISM.i PROPERTY SWIG_FLAGS "-DPISM_USE_TR1" APPEND)
    endif()

    if(Pism_USE_JANSSON)
      set_property(SOURCE PISM.i PROPERTY SWIG_FLAGS "-DPISM_USE_JANSSON" APPEND)
    endif()

    set_source_files_properties(PISM.i PROPERTIES
      CPLUSPLUS ON
      SWIG_MODULE_NAME cpp)

    # has to be set *before* calling SWIG_ADD_MODULE
    set(SWIG_MODULE_cpp_EXTRA_DEPS ${PISM_Python_deps})
    
    SWIG_ADD_MODULE(cpp python PISM.i pism_python.cc)
    SWIG_LINK_LIBRARIES(cpp ${PYTHON_LIBRARY} ${PISM_PYTHON_BINDING_LIBRARIES})

    # Disable compiler warnings:
    SET_SOURCE_FILES_PROPERTIES(${swig_generated_file_fullname}
      PROPERTIES COMPILE_FLAGS "-w")

    SWIG_ADD_MODULE(petsc_version python petsc_version.i petsc_version.cc)
    SWIG_LINK_LIBRARIES(petsc_version ${PYTHON_LIBRARY})

    # Disable compiler warnings:
    SET_SOURCE_FILES_PROPERTIES(${swig_generated_file_fullname}
      PROPERTIES COMPILE_FLAGS "-w")

    get_target_property(SWIG_cpp_LOCATION ${SWIG_MODULE_cpp_REAL_NAME} LOCATION)
    get_target_property(SWIG_petsc_version_LOCATION ${SWIG_MODULE_petsc_version_REAL_NAME} LOCATION)

    # Install Python .py files
    install(FILES
      ${SWIG_cpp_LOCATION}
      ${SWIG_petsc_version_LOCATION}
      ${CMAKE_CURRENT_BINARY_DIR}/cpp.py
      ${CMAKE_CURRENT_BINARY_DIR}/petsc_version.py
      DESTINATION ${PISM_INSTALL_PYTHON_MODULE_DIR}/PISM
      COMPONENT RuntimeLibraries
    )

add_custom_target (install_python_bindings_in_the_build_directory ALL
  COMMAND ${CMAKE_COMMAND} -E copy ${SWIG_cpp_LOCATION} ${CMAKE_BINARY_DIR}/site-packages/PISM
  COMMAND ${CMAKE_COMMAND} -E copy ${SWIG_petsc_version_LOCATION} ${CMAKE_BINARY_DIR}/site-packages/PISM/
  COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/cpp.py ${CMAKE_BINARY_DIR}/site-packages/PISM/
  COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/petsc_version.py ${CMAKE_BINARY_DIR}/site-packages/PISM/
  VERBATIM
  DEPENDS ${SWIG_MODULE_cpp_REAL_NAME}  _petsc_version install_site_packages_in_the_build_directory )

configure_file(${Pism_SOURCE_DIR}/test/pylintrc pylintrc)
add_custom_target (install_python_bindings_in_the_source_directory ALL
  COMMAND ${CMAKE_COMMAND} -E copy ${SWIG_cpp_LOCATION} ${Pism_SOURCE_DIR}/site-packages/PISM
  COMMAND ${CMAKE_COMMAND} -E copy ${SWIG_petsc_version_LOCATION} ${Pism_SOURCE_DIR}/site-packages/PISM/
  COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/cpp.py ${Pism_SOURCE_DIR}/site-packages/PISM/
  COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/petsc_version.py ${Pism_SOURCE_DIR}/site-packages/PISM/
  VERBATIM
  DEPENDS ${SWIG_MODULE_cpp_REAL_NAME}  _petsc_version)
add_custom_target (pylint
  COMMAND pylint --rcfile=${CMAKE_CURRENT_BINARY_DIR}/pylintrc ${Pism_SOURCE_DIR}/site-packages/PISM
  VERBATIM
  DEPENDS install_python_bindings_in_the_source_directory
)

# The Python code snippet below returns 1 if Python can import a PISM
# and if the directory of said PISM matches the place we are about to
# install PISM's Python wrappers. If the return value is not 1, we
# print a message stating how to set your PYTHONPATH.
set (pism_test_py "${PROJECT_BINARY_DIR}/pism_test.py")
file (WRITE "${pism_test_py}" "
from os.path import realpath, join
try:
    import PISM
except:
    exit(0)

if realpath(PISM.__file__) == realpath(join('${PISM_INSTALL_PYTHON_MODULE_DIR}', 'PISM', '__init__.pyc')):
    exit(1)
")

install(CODE "EXEC_PROGRAM( ${PYTHON_EXECUTABLE} ARGS ${pism_test_py} RETURN_VALUE PISM_PYTHON_MATCHES OUTPUT_VARIABLE PYTHON_OUT )
if(NOT PISM_PYTHON_MATCHES)
    MESSAGE(\"\n   ATTENTION! To complete installation of Python bindings you need to add\n\n   export PYTHONPATH=${PISM_INSTALL_PYTHON_MODULE_DIR}:\$PYTHONPATH\n\n   to your .bashrc or equivalent. \")
endif()
" )

endif(Pism_BUILD_PYTHON_BINDINGS)
